#!/usr/bin/env perl

use 5.014;
use warnings;
use English;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin/../extlib/lib/perl5";

use Fluent::Agent;

my $LOGLEVEL = 'INFO';

my $HUPPED = undef;
$SIG{ HUP } = sub { $HUPPED = 1; }; # reopen/reconnect/refork
my $TERMINATED = undef;
$SIG{ INT } = $SIG{ TERM } = sub { $TERMINATED = 1; }; # terminate
my $PIPED = undef;
$SIG{ PIPE } = sub { $PIPED = 1; }; # pipe, write failure for broken pipe (connection reset by peer)

my $checker_terminated = sub { $TERMINATED };
my $checker_reload = sub {
    if (shift) {
        $HUPPED = undef;
    } else {
        $HUPPED or $TERMINATED;
    }
};
my $checker_pipe = sub {
    if ($PIPED) {
        $PIPED = undef;
        return 1;
    }
    undef;
};

my $opt = {};
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
GetOptions($opt,
           qw(
                 help|h daemonize|d log|L=s verbose|v quiet|q
                 input-file|i=s input-pattern|I=s tag|t=s tag-field|T=s time-format|w=s time-field|W=s
                 input-port|p=i
                 output-file|o=s
                 forward-primary|f=s@ forward-secondary|s=s@
                 stderr|E
                 ping|P=s
                 command|x=s x-children|X=i x-respawn
                 x-in-json x-out-json x-json
                 x-in-msgpack x-out-msgpack x-msgpack
                 x-in-tsv-keys=s x-out-tsv-keys=s
                 x-in-time-field=s  x-out-time-field=s  x-time-field=s
                 x-in-time-format=s x-out-time-format=s x-time-format=s
                 x-in-tag-field=s  x-out-tag-field=s  x-tag-field=s
                 x-out-tag-string=s
                 x-in-remove-prefix=s x-in-add-prefix=s x-out-remove-prefix=s x-out-add-prefix=s
                 x-remove-prefix=s x-add-prefix=s
         ));
use Pod::Usage;
pod2usage(1) if $opt->{help};
if ($opt->{quiet}) {   $LOGLEVEL = 'WARN'; }
if ($opt->{verbose}) { $LOGLEVEL = 'DEBUG'; $ENV{LM_DEBUG} = 1; }

### Logs
use Log::Minimal;
$Log::Minimal::LOG_LEVEL = $LOGLEVEL;
$Log::Minimal::AUTODUMP = 1;
$Log::Minimal::PRINT = sub {
    my ( $time, $type, $message, $trace, $raw_message) = @_;
    if ( $type eq 'INFO' or $type eq 'WARN' ) {
        print "$time [$type] ($PID) $message\n";
    } else {
        print "$time [$type] ($PID) $message at $trace\n";
    }
};
$Log::Minimal::DIE = sub {
    my ( $time, $type, $message, $trace, $raw_message) = @_;
    die "$time [$type] ($PID) $message at $trace\n";
};
croakf "Log path (-L or --log) MUST be specified when daemonized" if $opt->{daemonize} and not defined($opt->{logpath});
use IO::Handle;
if (defined $opt->{logpath}) {
    my $logpath = $opt->{logpath};
    open(STDOUT, ">> $logpath") or die "failed to reopen STDOUT to $logpath";
    open(STDERR, ">> $logpath") or die "failed to reopen STDERR to $logpath";
    autoflush STDOUT 1;
    autoflush STDERR 1;
} else { # tty
    $Log::Minimal::COLOR = 1;
    autoflush STDERR 1;
}

### Input options
my $input = undef;
if (defined $opt->{'input-file'} and defined $opt->{'input-port'}) {
    croakf "Cannot specify both of INPUT_FILE(-i) and INPUT_PORT(-p)";
} elsif (defined $opt->{'input-file'}) {
    my ($input_file, $input_pattern, $tag_string, $tag_field, $time_format, $time_field) = (
        $opt->{'input-file'}, $opt->{'input-pattern'}, $opt->{'tag-string'}, $opt->{'tag-field'},
        $opt->{'time-format'}, $opt->{'time-field'},
    );
    croakf("Cannot find specified file readable: %s", $input_file) unless -f $input_file and -r $input_file;
    croakf("INPUT_PATTERN(-I) MUST be specified with INPUT_FILE(-i) option") unless defined $input_pattern;
    croakf("TAG(-t) or TAG_FIELD(-T) MUST be specified with INPUT_FILE(-i) option") unless defined $tag_string or defined $tag_field;
    $input = +{
        type => 'file',
        path => $input_file,
        pattern => qr/$input_pattern/,
        (defined $tag_string ?
             (tag_string => $tag_string)
             :
             (tag_field => $tag_field)),
        time_format => $time_format,
        time_field => ($time_field || 'time'),
    };
} elsif (defined $opt->{'input-port'}) {
    $input = +{ type => 'forward', port => $opt->{'input-port'} };
} else {
    croakf "No one input options specified";
}
debugf "Configured input: %s", $input;

### Output options
my $output = undef;
if (defined $opt->{'output-file'} and defined $opt->{'forward-primary'}) {
    croakf "Cannot specify both of OUTPUT_FILE(-o) and FORWARD_PRIMARY(-f)";
} elsif (defined $opt->{'output-file'}) {
    # With time specifier, we cannot check directory/file write permissions
    $output = +{
        type => 'file',
        path => $opt->{'output-file'},
        # format ?
    };
} elsif (defined $opt->{'forward-primary'}) {
    $output = +{
        type => 'forward',
        primary => [map { [split(/:/, $_)] } @{$opt->{'forward-primary'}}],
        secondary => [map { [split(/:/, $_)] } @{$opt->{'forward-secondary'} || []}],
        piped_checker => $checker_pipe,
    };
} elsif (defined $opt->{stderr}) {
    $output = +{
        type => 'stderr',
    };
} else {
    croakf "No one output options specified";
}
debugf "Configured output: %s", $output;

my $filter = undef;
if (defined $opt->{command}) {
    my ( @in_format, @out_format );
    if ($opt->{'x-json'}) { push @in_format, +{ type => 'json' }; push @out_format, +{ type => 'json' }; }
    if ($opt->{'x-in-json'}) { push @in_format, +{ type => 'json' }; }
    if ($opt->{'x-out-json'}) { push @out_format, +{ type => 'json' }; }
    if ($opt->{'x-msgpack'}) { push @in_format, +{ type => 'msgpack' }; push @out_format, +{ type => 'msgpack' }; }
    if ($opt->{'x-in-msgpack'}) { push @in_format, +{ type => 'msgpack' }; }
    if ($opt->{'x-out-msgpack'}) { push @out_format, +{ type => 'msgpack' }; }
    if ($opt->{'x-in-tsv-keys'}) { push @in_format, +{ type => 'tsv', fields => [split(/,/, $opt->{'x-in-tsv-keys'})]}; }
    if ($opt->{'x-out-tsv-keys'}) { push @out_format, +{ type => 'tsv', fields => [split(/,/, $opt->{'x-out-tsv-keys'})]}; }
    if (scalar(@in_format) < 1) { push @in_format, +{ type => 'json' }; };
    if (scalar(@out_format) < 1) { push @out_format, +{ type => 'json' }; };
    croakf "Too many in/out data format specified" if scalar(@in_format) > 1 or scalar(@out_format) > 1;
    $filter = +{
        type => 'exec',
        command => $opt->{command},
        children => $opt->{'x-children'} || 1,
        respawn => $opt->{'x-respawn'} || 0,
        piped_checker => $checker_pipe,
        in => +{
            format => $in_format[0], # { type => TYPENAME, ( fields => [FIELDS] ) }
            time => +{
                field => ($opt->{'x-in-time-field'} || $opt->{'x-time-field'} || 'time'),
                format => ($opt->{'x-in-time-format'} || $opt->{'x-time-format'} || '%s'),
            },
            tag => +{
                field => ($opt->{'x-in-tag-field'} || $opt->{'x-tag-field'} || 'tag'),
                remove_prefix => ($opt->{'x-in-remove-prefix'} || $opt->{'x-remove-prefix'} || ''),
                add_prefix => ($opt->{'x-in-add-prefix'} || ''),
            },
        },
        out => +{
            format => $out_format[0], # { type => TYPENAME, ( fields => [FIELDS] ) }
            time => +{
                field => ($opt->{'x-out-time-field'} || $opt->{'x-time-field'} || 'time'),
                format => ($opt->{'x-out-time-format'} || $opt->{'x-time-format'} || '%s'),
            },
            tag => +{
                field => ($opt->{'x-out-tag-field'} || $opt->{'x-tag-field'} || 'tag'),
                string => ($opt->{'x-out-tag-string'} || 'missing'),
                remove_prefix => ($opt->{'x-out-remove-prefix'} || ''),
                add_prefix => ($opt->{'x-out-add-prefix'} || $opt->{'x-add-prefix'} || ''),
            },
        },
    };
}
debugf "Configured filter: %s", ($filter || 'undefined');

### Ping options
my $ping = undef;
if (defined $opt->{'ping'}) {
    my ($ping_tag,$ping_data,$ping_interval) = split(/:/, $opt->{'ping'});
    $ping_interval ||= 60;
    croakf "Ping tag is invalid" unless $ping_tag;
    croakf "Ping data is invalid" unless $ping_data;
    $ping = +{
        tag => $ping_tag,
        data => $ping_data,
        interval => $ping_interval,
    };
}
debugf "Configured ping: %s", ($ping || 'undefined');

#TODO daemonize here (when specified by option in UNIX like system)
#TODO use Win32::Detached ?

sub main {
    my $agent = Fluent::Agent->new(
        input => $input,
        output => $output,
        filter => $filter,
        ping => $ping,
        buffers => undef, #TODO mmmmm.....
    );
    $agent->execute(
        checker => {
            term => $checker_terminated,
            reload => $checker_reload,
        },
    );
}

infof "Starting fluent-agent.";

main();

infof "Exiting fluent-agent.";

exit 0;

__END__

=head1 NAME

fluent-agent  - Fluentd Agent tools, perl implementation

=head1 SYNOPSIS

fluent-agent [options]

  Global Options:

    B<-d,--daemonize> Run in background(daemonized)
    B<-L,--log FILEPATH>    Output fluent-agent's log into I<FILEPATH> (if not specified, dropped)

    B<-h,--help>    Brief help message
    B<-v,--verbose> Output fluent-agent logs of all (DEBUG/INFO/WARN/CRIT, default + DEBUG)
    B<-q,--quiet>   Output fluent-agent logs of WARN/CRIT only (default: INFO/WARN/CRIT)

    B<-P TAG:DATA:INTERVAL> Ping message tag/data/interval. Use with forwarding options.
    B<--ping>              Equivalent to B<-P>

  Input Options:

    B<-i FILEPATH> Read messages from I<FILEPATH>
                     (MUST BE SPECIFIED with B<-I> and B<-t> or B<-T>, exclusive with B<-p>)
    B<-I REGEXP>     Parse regexp pattern, use with B<-i>
    B<-t TAG>      Tag of input log lines (exclusive with B<-T>)
    B<-T FIELD>    Field name of tag string, from REGEXP named captures
    B<-w PATTERN>  Time format (strptime format string) to parse time of log
                     (Without this option, time is set as current time)
    B<-W FIELD>    Field name of time, from REGEXP named captures (default: time)

    B<-p PORT>     read messages from I<PORT> (compatible with fluentd's forward input)

    B<--input-file>    Equivalent to B<-i>
    B<--input-pattern> Equivalent to B<-I>
    B<--tag>           Equivalent to B<-t>
    B<--tag-field>     Equivalent to B<-T>
    B<--time-format>   Equivalent to B<-w>
    B<--time-field>    Equivalent to B<-W>

    B<--input-port>    Equivalent to B<-p>

  Output Options:

    B<-o FILEPATH>  Write messages to I<FILEPATH> with TAB separated time, tag and JSON of message
                      (exclusive with B<-f> and B<-s>)
                      FILEPATH parsed as format string like 'strftime' (ex: %Y, %m, %d, %H, %M, %S)
    B<-f HOST:PORT> Forward messages to primary server(s), specified by HOST:PORT
    B<-s HOST:PORT> Forward messages to secondary server(s) when primary servers are down

    B<-E>           Write messages to stderr (for debug)

    B<--output-file>       Equivalent to B<-o>
    B<--forward-primary>   Equivalent to B<-f>
    B<--forward-secondary> Equivalent to B<-s>
    B<--stderr>            Equivalent to B<-E>

  Filter Options:

    B<-x COMMAND>        Filter message between input and output, with executed I<COMMAND>'s STDIN and STDOUT
                           (equivalent with Fluentd's out_exec_filter)
    B<--command COMMAND> Equivalent to B<-x>

    B<-X NUM>       Number of filter child processes (number of forks)
    B<--x-children> Equivalent to B<-X>

    B<--x-respawn>  Respawn childs which unexpectedly died (default: main process also dies)

    B<--x-in-json>  Serialize messages as JSON on STDIN of filter (Default)
    B<--x-out-json> Deserialize messages as JSON on STDOUT of filter (Default)
    B<--x-json>     Equivalent to B<--x-in-json> and B<--x-out-json>

    B<--x-in-msgpack>  Serialize messages as MessagePack on STDIN of filter (Default)
    B<--x-out-msgpack> Deserialize messages as MessagePack on STDOUT of filter (Default)
    B<--x-msgpack>     Equivalent to B<--x-in-msgpack> and B<--x-out-msgpack>

    B<--x-in-tsv-keys KEYS>
                    Serialize messages with TSV on STDIN of filter, with fields named by I<KEYS> (comma separated)
    B<--x-out-tsv-keys KEYS>
                    Deserialize messages with TSV on STDOUT of filter, with fields named by I<KEYS> (comma separated)

    B<--x-in-time-field FIELDNAME>
                    Serialize messages with time field named as I<FIELDNAME> (default: time)
    B<--x-out-time-field FIELDNAME>
                    Deerialize messages with time field named as I<FIELDNAME> (defualt: time)
    B<--x-time-field FIELDNAME>
                    Same as B<--x-in-time-field> and B<--x-out-time-field>

    B<--x-in-time-format FORMAT>
                    Format used in serialization (for in-time-format) (default: unix time integer (%s))
    B<--x-out-time-format FORMAT>
                    Format used in deserialization (for out-time-format) (default: unix time integer (%s))
    B<--x-time-format FORMAT>
                    Same as B<--x-in-time-format> and B<--x-out-time-field>

    B<--x-in-tag-field FIELDNAME>
                    Serialize messages with tag field named as I<FIELDNAME> (default: tag)
    B<--x-out-tag-field FIELDNAME>
                    Deserialize messages with tag field named as I<FIELDNAME> (default: tag)
    B<--x-tag-field FIELDNAME>
                    Same as B<--x-in-tag-field> and B<--x-out-tag-field>

    B<--x-out-tag-string STRING>
                    Specify tag as STRING of output records without 'x-out-tag-field' field (default: missing)

    B<--x-in-remove-prefix TAG_PREFIX>
                    Remove tag prefix before serialization for filter's STDIN
    B<--x-in-add-prefix TAG_PREFIX>
                    Add tag prefix before serialization for filter's STDIN
    B<--x-out-remove-prefix TAG_PREFIX>
                    Remove tag prefix after deserialization for filter's STDOUT
    B<--x-out-add-prefix TAG_PREFIX>
                    Add tag prefix after deserialization for filter's STDOUT

    B<--x-remove-prefix TAG_PREFIX>
                    Remove tag prefix before serialization for filter's STDIN
    B<--x-add-prefix TAG_PREFIX>
                    Add tag prefix after deserialization for filter's STDOUT

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
